from PySide import QtGui

from Views.Views_Ui.Ui_AddTCView import Ui_AddTCView
import json


class AddTCView(object):
    """
    This class represents a window. It references the class
    Ui_CreateTCView, that class is where the graphical interface
    is created
    """
    resizeFlag = False

    def __init__(self):
        self.view = QtGui.QDialog()
        self.window = Ui_AddTCView()
        self.window.setupUi(self.view)
        self.extra_customization()
        self.view.resizeEvent = self.resize_elements

    def get_window(self):
        """
        This method returns the view that this class references

        :return: A view. It could be a QWidget, QMainWindow, etc.
        """
        return self.view

    def extra_customization(self):
        """
        This method allow us to define an extra configuration for the
        view without having to touch the code generated by the QtDesigner
        giving us a extra level of abstraction
        """
        pass
        #self.view.setStyleSheet("background-color: white")

    def resize_elements(self, event):
        """
        This method defines all the instructions needed to make
        our CreateTCView window responsive

        :param event: The event that triggers this method
        """
        padding = 20
        cte_w = self.window.commandTextEdit.frameGeometry().width()
        cte_h = self.window.commandTextEdit.frameGeometry().height()
        cte_x = self.window.commandTextEdit.pos().x()
        cte_y = self.window.commandTextEdit.pos().y()

        if self.resizeFlag:
            self.window.commandTextEdit.resize(self.view.frameGeometry().width() - 2 * padding,
                                               self.view.frameGeometry().height() - 3 * padding + 4 - cte_y)
        else:
            self.resizeFlag = True

    def add_item_svc_type_combo_box(self, item: str):
        self.window.serviceComboBox.addItem(item, int(item))

    def add_item_msg_type_combo_box(self, item: str):
        self.window.msgComboBox.addItem(item, int(item))

    def clear_msg_type_combo_box(self):
        self.window.msgComboBox.clear()

    def show(self):
        """
        This method calls to the .exec()_ method of the qDialog referenced
        by this class
        """
        return self.view.exec_()

    def set_tc_text(self, json):
        """
        This method prints in the text box a json template
        making the creation of telecommands easier

        :param json: String in json format with the TC template
        """
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setStyleHint(QtGui.QFont.Monospace)
        font.setFixedPitch(True)
        font.setPointSize(10)
        metrics = QtGui.QFontMetrics(font)
        self.window.commandTextEdit.setTabStopWidth(metrics.width(' '))
        self.window.commandTextEdit.setPlainText(json)

    def get_tc_text(self):
        return json.loads(self.window.commandTextEdit.toPlainText())
